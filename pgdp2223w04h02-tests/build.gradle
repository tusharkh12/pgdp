plugins {
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '5.0.12'
}

apply plugin: 'java'
sourceCompatibility = 17
version = '1.0.0'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    testImplementation 'de.tum.in.ase:artemis-java-test-sandbox:1.10.1'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // testImplementation(':W04H02---Mega-Merge-Sort')
    // testImplementation(':W04H02---Mega-Merge-Sort-Solution')
}

def assignmentSrcDir = "../pgdp2223w04h02-tests/src"
def studentOutputDir = sourceSets.main.java.destinationDirectory.get()
def scaConfigDirectory = "$projectDir/staticCodeAnalysisConfig"

sourceSets {
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test'
        }
    }


    main {
        java {
            srcDirs = [assignmentSrcDir]
        }
        resources {
            srcDirs = []
        }
    }
}

def forbiddenPackageFolders = [ //(2)
                                "$studentOutputDir/ch/qos/logback/",
                                "$studentOutputDir/com/intellij/",
                                "$studentOutputDir/com/sun/",
                                "$studentOutputDir/de/tum/in/test/api/",
                                "$studentOutputDir/java/",
                                "$studentOutputDir/javax/",
                                "$studentOutputDir/jdk/",
                                "$studentOutputDir/net/jqwik/",
                                "$studentOutputDir/org/assertj/",
                                "$studentOutputDir/org/apache/",
                                "$studentOutputDir/org/eclipse/",
                                "$studentOutputDir/org/gradle/",
                                "$studentOutputDir/org/jacoco/",
                                "$studentOutputDir/org/json/",
                                "$studentOutputDir/org/junit/",
                                "$studentOutputDir/org/opentest4j/",
                                "$studentOutputDir/sun/",
                                "$studentOutputDir/worker/org/gradle/"
]
test {
    doFirst { //(1)
        for (String packageFolder in forbiddenPackageFolders) {
            assert !file(packageFolder).exists(): "$packageFolder must not exist within the submission."
        }
    }
    defaultCharacterEncoding = 'UTF-8'
    useJUnitPlatform()
}


checkstyle {
    configFile = file("$scaConfigDirectory/checkstyle-configuration.xml")
    ignoreFailures = true
    // exclude the test files
    checkstyleTest.enabled = false
    checkstyleMain.reports {
        xml.outputLocation = file('target/checkstyle-result.xml')
    }
}

spotbugs {
    excludeFilter = file("$scaConfigDirectory/spotbugs-exclusions.xml")
    ignoreFailures = true
    // exclude the test files
    spotbugsTest.enabled = false
    spotbugsMain.reports {
        xml {
            enabled = true
            outputLocation = file('target/spotbugsXml.xml')
        }
        html.enabled = false
    }
}

pmd {
    ruleSets = ["$scaConfigDirectory/pmd-configuration.xml"]
    rulesMinimumPriority = 5
    ignoreFailures = true
    // exclude the test files
    pmdTest.enabled = false
    pmdMain.reports {
        xml.outputLocation = file('target/pmd.xml')
    }
}


